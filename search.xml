<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>gir</title>
      <link href="/2023/06/16/gir/"/>
      <url>/2023/06/16/gir/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划的问题与解题框架</title>
      <link href="/2023/06/08/23-6-8-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/06/08/23-6-8-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划的问题与解题框架"><a href="#动态规划的问题与解题框架" class="headerlink" title="动态规划的问题与解题框架"></a>动态规划的问题与解题框架</h1><p>动态规划其中包含 <strong>分治思想</strong>，<strong>空间换时间</strong>，<strong>最优解</strong>等多种基石算法思想。<br>动态规划类似于分治算法，也通过组合子问题的解得到原问题的解，不过适合动态规划解决的问题具有<strong>重叠子问题</strong>和<strong>最优子结构</strong>两大特性。 </p><h2 id="两大特性"><a href="#两大特性" class="headerlink" title="两大特性"></a>两大特性</h2><h3 id="重叠子问题"><a href="#重叠子问题" class="headerlink" title="重叠子问题"></a>重叠子问题</h3><p>动态规划的子问题是有<strong>重叠的</strong>，即各个子问题中包含重复的<strong>更小子问题</strong>。若使用暴力法穷举，求解这些相同子问题会产生大量的重复计算，效率低下。<br>动态规划在第一次求解某子问题时，会<strong>将子问题的解保存</strong>；后续遇到重叠子问题时，则直接通过查表获取解或者通过语言特性来获取，保证每个独立子问题只被计算一次，从而降低算法的时间复杂度。  </p><h3 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h3><p>如果一个问题的最优解可以由其子问题的最优解组合构成，并且这些子问题可以独立求解，那么称此问题具有最优子结构。<br>动态规划从基础问题的解开始，不断迭代组合、选择子问题的最优解，最终得到原问题最优解。  </p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="重叠子问题示例：斐波那契数列"><a href="#重叠子问题示例：斐波那契数列" class="headerlink" title="重叠子问题示例：斐波那契数列"></a>重叠子问题示例：斐波那契数列</h3><p>暴力递归-&gt;记忆化递归-&gt;动态规划 </p><h3 id="最优子结构示例：蛋糕最高售价"><a href="#最优子结构示例：蛋糕最高售价" class="headerlink" title="最优子结构示例：蛋糕最高售价"></a>最优子结构示例：蛋糕最高售价</h3><p>暴力递归-&gt;记忆化递归-&gt;动态规划  </p><h2 id="动态规划解题框架"><a href="#动态规划解题框架" class="headerlink" title="动态规划解题框架"></a>动态规划解题框架</h2><p>若确定给定问题具有重叠子问题和最优子结构，那么就可以使用动态规划求解。总体上看，求解可分为四步： </p><ol><li><strong>状态定义</strong>： 构建问题最优解模型，包括问题<strong>最优解的定义</strong>、有哪些<strong>计算解的自变量</strong>； </li><li><strong>初始状态</strong>： 确定<strong>基础子问题的解</strong>（即已知解），原问题和子问题的解都是以基础子问题的解为起始点，在迭代计算中得到的； </li><li><strong>转移方程</strong>： 确定原问题的解与子问题的解之间的关系是什么，以及使用何种<strong>选择规则</strong>从子问题最优解组合中选出原问题最优解； </li><li><strong>返回值</strong>： 确定应返回的问题的解是什么，即动态规划<strong>在何处停止迭代</strong>；  完成以上步骤后，便容易写出对应的解题代码。<br>总结于：  [<a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/m5zfc1/]">https://leetcode.cn/leetbook/read/illustration-of-algorithm/m5zfc1/]</a>:</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
